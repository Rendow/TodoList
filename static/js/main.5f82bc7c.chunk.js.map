{"version":3,"sources":["api/todolists-api.ts","features/CommonActions/App.ts","utils/error-utils.ts","features/Auth/selectors.tsx","utils/redux-utils.ts","api/types.ts","features/Auth/auth-reducer.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Application/selectors.ts","features/Application/application-reducer.ts","features/Application/index.tsx","app/App.tsx","app/reducer.ts","app/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","appActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","selectIsLoggedIn","state","auth","isLoggedIn","AppDispatch","useDispatch","useActions","action","useMemo","bindActionCreators","TaskStatuses","TaskPriorities","login","createAsyncThunk","param","a","res","resultCode","logout","asyncActions","slice","createSlice","name","initialState","reducers","setIsLoggedIn","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","Login","actions","useSelector","authSelectors","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","resultAction","rejected","match","setFieldError","field","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","type","FormControlLabel","control","Checkbox","checked","Button","variant","color","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatus","addTodolistTC","todolist","changeTodolistTitleTC","changeTodolistFilter","index","findIndex","tl","filter","entityStatus","map","splice","unshift","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","tasksReducer","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","style","marginLeft","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","wordWrap","width","padding","onDoubleClick","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","Completed","New","onTitleChangeHandler","newValue","key","className","position","display","size","Delete","fontSize","Todolist","demo","todolistsActions","useEffect","addTaskCallback","helper","thunk","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","Paper","cursor","TodolistsList","addTodolistCallback","spacing","flexWrap","overflowX","height","allTodolistTasks","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","marginBottom","open","autoHideDuration","onClose","severity","selectStatus","selectIsInitialized","isInitialized","initializeApp","appReducer","App","appSelectors","document","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","LinearProgress","Container","fixed","exact","path","render","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.5f82bc7c.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {ResponseType,GetTasksResponse, LoginParamsType, TaskType, TodolistType, UpdateTaskModelType} from \"./types\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '7e928b19-02e3-4839-a906-80cc9541b152'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n        const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n        return promise\r\n    }\r\n}\r\n\r\n\r\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import {AxiosError} from \"axios\";\r\nimport {appActions} from \"../features/CommonActions/App\";\r\nimport {ResponseType} from \"../api/types\";\r\n\r\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import {useDispatch} from \"react-redux\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport {AppDispatchType} from \"./types\";\r\n\r\nexport const AppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(action:T){\r\n    const dispatch = AppDispatch()\r\n\r\n    //bindActionCreators связывает санку\\экшн с дипатчем, позволяя сократить код: dispatch(action(value)) -> action(value)\r\n    //useMemo сохраняет вычесленные значения функции\r\n    const boundAction = useMemo(() => {\r\n        return bindActionCreators(action,dispatch)\r\n    },[])\r\n\r\n    return boundAction\r\n}","export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {FieldErrorType, LoginParamsType} from \"../../api/types\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {authAPI} from \"../../api/todolists-api\";\r\nimport { appActions } from '../CommonActions/App';\r\n\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\n//замена authReducer от redux-toolkit\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {isLoggedIn: false},\r\n\r\n    //state тут - 'черновик' стейта, предоставленный immerjs.\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {AppDispatch} from \"../../utils/redux-utils\";\r\nimport {authActions, authSelectors} from \"./index\";\r\nimport {login} from \"./auth-reducer\";\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = AppDispatch()\r\n\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const resultAction = await dispatch(authActions.login(values));\r\n\r\n            if  (login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    const error = resultAction.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {TodolistType} from \"../../api/types\";\r\nimport {todolistsAPI} from \"../../api/todolists-api\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {ThunkError} from \"../../utils/types\";\r\nimport {appActions} from \"../CommonActions/App\";\r\nimport {RequestStatusType} from \"../Application\";\r\nimport {authActions} from \"../Auth\";\r\n\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n const removeTodolistTC = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n\r\n    await todolistsAPI.deleteTodolist(todolistId)\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {id: todolistId}\r\n})\r\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n            .addCase(authActions.logout.fulfilled, (state) => {\r\n               return state = []\r\n            })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {AppRootStateType, ThunkError} from \"../../utils/types\";\r\nimport {appActions} from \"../CommonActions/App\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from \"../../api/types\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {todolistsAPI} from \"../../api/todolists-api\";\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\nimport {authActions} from \"../Auth\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\n\r\nexport const removeTask = createAsyncThunk('tasks/removeTask', async (param:{taskId: string, todolistId: string}, thunkAPI) => {\r\n        await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\n\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleAsyncServerAppError(res.data, thunkAPI)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            return handleAsyncServerNetworkError(err, thunkAPI)\r\n        }\r\n    })\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string },\r\n                                                                      thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\n\r\n// кажется, что стейт меняется мутабельно - но это не так\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n\r\n    // 'импорт' редюсеров из других редюсеров\r\n    // блягодаря builder нет необходимости типизировать по новой\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n\r\n            //возвращенные из санок значения попадают в fulfilled/pending/reject - альтернатива экшн криейт\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n            .addCase(authActions.logout.fulfilled, (state) => {\r\n               return state = {}\r\n            })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void}\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== '') {\r\n                addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span style={{ wordWrap: 'break-word', width:'200px',padding: '8px 0'}}\r\n                onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from \"../../../../api/types\";\r\nimport {tasksActions} from \"../../index\";\r\nimport {useActions} from \"../../../../utils/redux-utils\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todolistId}),\r\n        [props.task.id, props.todolistId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    return <div key={props.task.id}\r\n                className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                style={{position: 'relative', display:'flex'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton size={'small'} onClick={onClickHandler}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {TaskStatuses, TaskType} from \"../../../api/types\";\r\nimport {AppDispatch, useActions} from \"../../../utils/redux-utils\";\r\nimport {tasksActions, todolistsActions} from \"../index\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n\r\n    const dispatch = AppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        if (!props.tasks.length){\r\n            fetchTasks(props.todolist.id)\r\n        }\r\n    }, [])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n        let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occurred')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n\r\n    }, [props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title: title})\r\n    }, [props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n        filter: filter,\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color: PropTypes.Color,\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n\r\n        <div style={{display:'flex', wordWrap: 'break-word'}}>\r\n            <h3 style={{width: '240px'}}>\r\n                <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            </h3>\r\n            <IconButton\r\n                size={'medium'}\r\n                onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n            >\r\n                <Delete fontSize={'default'}/>\r\n            </IconButton>\r\n        </div>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length &&\r\n            <div style={{padding: '10px', color: 'grey', cursor:'default'}}>Create task</div>}\r\n        </div>\r\n        <div>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {todolistsActions} from \"./index\";\r\nimport {authSelectors} from \"../Auth\";\r\nimport {AppRootStateType} from \"../../utils/types\";\r\nimport {AppDispatch, useActions} from \"../../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const dispatch = AppDispatch()\r\n\r\n    const {fetchTodolistsTC} = useActions(todolistsActions)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        if (!todolists.length){\r\n            fetchTodolistsTC()\r\n        }\r\n    }, [])\r\n\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.addTodolistTC(title)\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occurred')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll', height:'70vh'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","// * - ипортируем все из файла\r\nimport {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst todolistsReducer  = todolistsSlice.reducer\r\nconst tasksReducer  = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../../features/CommonActions/App'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions} from '../../utils/redux-utils'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            setAppError({error: null});\r\n        }\r\n        setAppError({error: null});\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar style={{marginBottom:'80px'}} open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {authActions} from '../Auth'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn({value: true}))\r\n    } else {}\r\n}\r\n)\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1, slice} from './application-reducer'\r\nimport {asyncActions} from './application-reducer'\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {Route} from 'react-router-dom'\r\nimport {authActions, authSelectors, Login} from '../features/Auth/'\r\nimport {appActions, appSelectors} from \"../features/Application\";\r\nimport {useActions} from '../utils/redux-utils'\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector(appSelectors.selectStatus)\r\n    const isInitialized = useSelector(appSelectors.selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if (!isInitialized) {\r\n           initializeApp()\r\n        }\r\n        document.title='To-do list'\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n         logout()\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n            <div className=\"App\">\r\n                <AppBar position=\"static\">\r\n                    <Toolbar >\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={false}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n                <ErrorSnackbar/>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList\";\r\nimport {appReducer} from \"../features/Application\";\r\nimport {authReducer} from \"../features/Auth/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers, задаём структуру\r\n// единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})","import thunkMiddleware from 'redux-thunk'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\nimport {rootReducer} from \"./reducer\";\r\n\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// для обращения к store через консоль\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nif (process.env.NODE_ENV !== 'production' && module.hot) {\r\n    module.hot.accept('./reducer', () => {\r\n        // replaceReducer - динамически подменяет главный редюсер\r\n          store.replaceReducer(rootReducer)\r\n    })\r\n\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './app/App'\r\nimport {store} from './app/store'\r\nimport {Provider} from 'react-redux'\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nconst rerenderTree = () => {\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>, document.getElementById('root'))\r\n}\r\n\r\nrerenderTree()\r\n\r\n//hot-reload, если приложение в процессе разработки, то при обновлении данных, они\r\n// обновляются локально, без перезугрузки всей страницы\r\nif (process.env.NODE_ENV !== 'production' && module.hot) {\r\n    module.hot.accept('./app/App', () => {\r\n        rerenderTree()\r\n    })\r\n}"],"sourceRoot":""}