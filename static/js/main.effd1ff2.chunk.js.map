{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","state/todolist-reducer.ts","state/task-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","style","width","label","size","color","variant","value","onChange","event","currentTarget","onKeyPress","e","key","helperText","IconButton","onClick","Add","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTaskTitle","onDoubleClick","TodoList","changeTodolistTitleFilter","todoListid","removeTodolist","Delete","addTask","listStyle","paddingLeft","tasks","map","task","id","className","isDone","Checkbox","checked","changeTaskStatus","newTitle","removeTasks","Button","filter","changeTodoListFilter","marginLeft","todoListId1","v1","todoListId2","initialState","AppWithRedux","todoLists","useSelector","state","todolists","dispatch","useDispatch","removeTask","taskID","todoListID","action","type","taskId","todoListId","addTaskAC","newIsDoneValue","changeFilter","newFilterValue","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","AddTodoListAC","spacing","tl","tasksForTodoList","t","item","Paper","elevation","rootReducer","combineReducers","copyState","newTask","find","newTodoListId","newTodoList","todoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCsCSC,MA/Cf,SAAqBC,GAA8B,IAAD,EACpBC,mBAAiB,IADG,mBACvCC,EADuC,KAChCC,EADgC,OAEpBF,oBAAkB,GAFE,mBAEvCG,EAFuC,KAEhCC,EAFgC,KAcxCC,EAAU,WACZ,IAAMC,EAAeL,EAAMM,OACvBD,EACAP,EAAMM,QAAQC,GAEdF,GAAS,GAEbF,EAAS,KAIb,OACI,6BACI,kBAACM,EAAA,EAAD,CACIC,MAAO,CAACC,MAAO,OACfC,MAAO,QACPC,KAAM,QACNC,MAAO,UACPC,QAAS,WACTC,MAAOd,EACPe,SA9BQ,SAACC,GACjBf,EAASe,EAAMC,cAAcH,OAC7BX,GAAS,IA6BDe,WA3Bc,SAACC,GACvBhB,GAAS,GACK,UAAVgB,EAAEC,KACFhB,KAyBIF,MAAOA,EACPmB,WAAYnB,EAAQ,qBAAuB,KAI/C,kBAACoB,EAAA,EAAD,CAAYC,QAASnB,GAArB,IAAgC,kBAACoB,EAAA,EAAD,MAAhC,OCLGC,MArCf,SAAsB3B,GAA8B,IAAD,EACfC,oBAAkB,GADH,mBACxC2B,EADwC,KAC9BC,EAD8B,OAErB5B,mBAAiBD,EAAME,OAFF,mBAExCA,EAFwC,KAEjCC,EAFiC,KAmB/C,OACIyB,EACI,kBAACnB,EAAA,EAAD,CACIC,MAAO,CAACC,MAAO,SACfE,KAAM,QACNC,MAAO,YACHC,QAAS,WACTC,MAAOd,EACP4B,WAAW,EACXb,SAnBI,SAACC,GACjBf,EAASe,EAAMC,cAAcH,QAmBjBe,OAxBI,WAChBF,GAAY,GACZ7B,EAAMgC,gBAAgB9B,IAuBVkB,WAlBA,SAACC,GACA,UAAVA,EAAEC,MACDO,GAAY,GACZ7B,EAAMgC,gBAAgB9B,OAkBpB,0BAAM+B,cA7BG,kBAAMJ,GAAY,KA6BO7B,EAAME,Q,2BCyDvCgC,I,EAAAA,EA7Ef,SAAkBlC,GAQd,OACI,6BACI,4BAEI,kBAAC,EAAD,CAAcE,MAAOF,EAAME,MAAO8B,gBALlB,SAAC9B,GAAD,OAAkBF,EAAMmC,0BAA0BjC,EAAOF,EAAMoC,eAO/E,kBAACZ,EAAA,EAAD,CAAYC,QARD,kBAAMzB,EAAMqC,eAAerC,EAAMoC,cAQ5C,IAAuC,kBAACE,EAAA,EAAD,MAAvC,MAGJ,kBAAC,EAAD,CAAahC,QAfL,SAACJ,GAAD,OAAmBF,EAAMuC,QAAQrC,EAAOF,EAAMoC,eAiBtD,wBAAI1B,MAAO,CAAC8B,UAAW,OAAQC,YAAa,MAGpCzC,EAAM0C,MAAMC,KAAI,SAAAC,GAQZ,OACI,wBAAItB,IAAKsB,EAAKC,GAAIC,UAAWF,EAAKG,OAAS,UAAY,IACnD,kBAACC,EAAA,EAAD,CACIlC,MAAO,YACPmC,QAASL,EAAKG,OACd9B,SAVa,SAACI,GAAD,OACrBrB,EAAMkD,iBAAiBN,EAAKC,GAAIxB,EAAEF,cAAc8B,QAASjD,EAAMoC,eAa3D,kBAAC,EAAD,CAAclC,MAAO0C,EAAK1C,MAAO8B,gBAZjB,SAACmB,GAAD,OACpBnD,EAAMgC,gBAAgBY,EAAKC,GAAIM,EAASnD,EAAMoC,eAY1C,kBAACZ,EAAA,EAAD,CAAYC,QAhBG,kBAAMzB,EAAMoD,YAAYR,EAAKC,GAAI7C,EAAMoC,cAgBtD,IAAuC,kBAACE,EAAA,EAAD,MAAvC,UAMpB,6BACI,kBAACe,EAAA,EAAD,CAEItC,QAAS,YACTD,MAAwB,QAAjBd,EAAMsD,OAAmB,YAAc,UAC9CzC,KAAM,QACNY,QAjDU,kBAAMzB,EAAMuD,qBAAqB,MAAOvD,EAAMoC,cA4C5D,QAQA,kBAACiB,EAAA,EAAD,CACI3C,MAAO,CAAE8C,WAAY,OACrBzC,QAAS,YACTD,MAAwB,WAAjBd,EAAMsD,OAAsB,YAAc,UACjDzC,KAAM,QACNY,QAxDa,kBAAMzB,EAAMuD,qBAAqB,SAAUvD,EAAMoC,cAmDlE,UAQA,kBAACiB,EAAA,EAAD,CACI3C,MAAO,CAAE8C,WAAY,OACrBzC,QAAS,YACTD,MAAwB,cAAjBd,EAAMsD,OAAyB,YAAc,UACpDzC,KAAM,QACNY,QA/DgB,kBAAMzB,EAAMuD,qBAAqB,YAAavD,EAAMoC,cA0DxE,gB,+ECxDLqB,EAAcC,cACdC,EAAcD,cAErBE,EAA+B,CAC/B,CAACf,GAAIY,EAAavD,MAAO,gBAAiBoD,OAAQ,OAClD,CAACT,GAAIc,EAAazD,MAAO,cAAeoD,OAAQ,Q,gBCDhDM,GAA0B,mBACzBH,EAAc,CACX,CAACZ,GAAIa,cAAMxD,MAAO,KAAM6C,QAAQ,GAChC,CAACF,GAAIa,cAAMxD,MAAO,QAAS6C,QAAQ,GACnC,CAACF,GAAIa,cAAMxD,MAAO,aAAc6C,QAAQ,KAJlB,cAMzBY,EAAc,CACX,CAACd,GAAIa,cAAMxD,MAAO,OAAQ6C,QAAQ,GAClC,CAACF,GAAIa,cAAMxD,MAAO,QAAS6C,QAAQ,GACnC,CAACF,GAAIa,cAAMxD,MAAO,SAAU6C,QAAQ,KATd,G,QCsGfc,MA1Gf,WAEA,IAAIC,EAAYC,aAA+C,SAAAC,GAAK,OAAIA,EAAMC,aAC1EvB,EAAQqB,aAA8C,SAAAC,GAAK,OAAIA,EAAMtB,SAGrEwB,EAAWC,cAEX,SAASC,EAAWC,EAAgBC,GACjC,IAAIC,ED+DA,CAACC,KAAK,cAAcC,OC/DGJ,ED+DYK,WC/DJJ,GAClCJ,EAASK,GAGb,SAAShC,EAAQrC,EAAeoE,GAC5B,IAAIC,ED4Da,SAACrE,EAAcwE,GACpC,MAAO,CAACF,KAAK,WAAYtE,QAAMwE,cC7DbC,CAAUzE,EAAOoE,GAC/BJ,EAASK,GAGb,SAASrB,EAAiBmB,EAAgBO,EAAyBN,GAC/D,IAAIC,ED2DD,CAACC,KAAK,qBAAsBC,OC3DEJ,ED2DKK,WC3DkBJ,ED2DNvB,OC3DV6B,GACxCV,EAASK,GAEb,SAASvC,EAAgBqC,EAAgBlB,EAAkBmB,GACvD,IAAIC,ED0DD,CAACC,KAAK,oBAAqBC,OC1DEJ,ED0DKK,WC1DYJ,ED0DApE,MC1DViD,GACvCe,EAASK,GAIb,SAASM,EAAaC,EAAkCR,GACpD,IAAIC,EFeD,CAACC,KAAK,yBAA0B3B,GEfEyB,EFeEhB,OEfSwB,GAChDZ,EAASK,GAGb,SAASpC,EAA0BgB,EAAkBmB,GACjD,IAAIC,EFOD,CAACC,KAAK,wBAAyBtE,MEPHiD,EFOSN,GEPAyB,GACxCJ,EAASK,GAGb,SAASlC,EAAeiC,GACpB,IAAIC,EFJD,CAACC,KAAK,kBAAmB3B,GEIGyB,GAC/BJ,EAASK,GAWb,OACI,yBAAKzB,UAAU,OACX,kBAACiC,EAAA,EAAD,CAAQC,SAAS,UACjB,kBAACC,EAAA,EAAD,KACI,kBAACzD,EAAA,EAAD,CAAY0D,KAAK,QAAQpE,MAAM,UAAUqE,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYtE,QAAQ,MAApB,QAGA,kBAACsC,EAAA,EAAD,CAAQvC,MAAM,WAAd,WAGJ,kBAACwE,EAAA,EAAD,CAAWC,OAAK,GAEjB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAC/E,MAAO,CAACgF,QAAS,WAChC,kBAAC,EAAD,CAAapF,QAxBrB,SAAqBJ,GACjB,IAAIqE,EFPiB,SAACrE,GAC1B,MAAO,CAACsE,KAAK,eAAgBtE,MAAMA,EAAOwE,WAAYhB,eEMpCiC,CAAczF,GAC5BgE,EAASK,OAyBD,kBAACiB,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAS,GAC3B9B,EAAUnB,KAAI,SAAAkD,GACR,IAAIC,EAAmBpD,EAAMmD,EAAGhD,IAOhC,MANkB,WAAdgD,EAAGvC,SACHwC,EAAmBA,EAAiBxC,QAAO,SAAAyC,GAAC,OAAiB,IAAbA,EAAEhD,WAEpC,cAAd8C,EAAGvC,SACHwC,EAAmBA,EAAiBxC,QAAO,SAAAyC,GAAC,OAAiB,IAAbA,EAAEhD,WAGlD,kBAACyC,EAAA,EAAD,CAAMQ,MAAI,EAAC1E,IAAKuE,EAAGhD,IACf,kBAACoD,EAAA,EAAD,CAAOC,UAAW,EAAGxF,MAAO,CAAEgF,QAAS,UACvC,kBAAC,EAAD,CACItD,WAAYyD,EAAGhD,GACf3C,MAAO2F,EAAG3F,MACVwC,MAAOoD,EACPxC,OAAQuC,EAAGvC,OACXf,QAASA,EACTa,YAAagB,EACbb,qBAAsBsB,EACtB3B,iBAAkBA,EAClBlB,gBAAiBA,EACjBK,eAAgBA,EAChBF,0BAA2BA,a,QCnHrDgE,EAAcC,YAAgB,CAChC1D,MFqCuB,WAA0E,IAAzEsB,EAAwE,uDAAlDJ,EAAcW,EAAoC,uCAChG,OAAQA,EAAOC,MAEX,IAAK,cACD,IAAI6B,EAAS,eAAOrC,GAEpB,OADAqC,EAAU9B,EAAOG,YAAc2B,EAAU9B,EAAOG,YAAYpB,QAAO,SAAAV,GAAI,OAAIA,EAAKC,KAAO0B,EAAOE,UACvF4B,EAEX,IAAK,WACD,IAAMC,EAAoB,CACtBzD,GAAIa,cACJxD,MAAOqE,EAAOrE,MACd6C,QAAQ,GAERsD,EAAS,eAAOrC,GAEpB,OADAqC,EAAU9B,EAAOG,YAAjB,CAAgC4B,GAAhC,mBAA4CD,EAAU9B,EAAOG,cACtD2B,EAGX,IAAK,qBACD,OAAO,2BACArC,GADP,kBAEKO,EAAOG,WAAaV,EAAMO,EAAOG,YAAY/B,KAAI,SAAAC,GAC9C,OAAIA,EAAKC,KAAO0B,EAAOE,OACZ,2BAAI7B,GAAX,IAAiBG,OAAQwB,EAAOxB,SAEzBH,OAKvB,IAAK,oBAEA,IAAIyD,EAAS,eAAOrC,GACdpB,EAAOyD,EAAU9B,EAAOG,YAAY6B,MAAK,SAAAR,GAAC,OAAIA,EAAElD,KAAO0B,EAAOE,UAIpE,OAHI7B,IACAA,EAAK1C,MAAQqE,EAAOrE,OAEjBmG,EAEZ,IAAK,eACD,IAAMG,EAAgBjC,EAAOG,WAC7B,OAAO,2BAAIV,GAAX,kBAAkBwC,EAAe,KAErC,IAAK,kBACD,IAAIH,EAAS,eAAOrC,GAEpB,cADOqC,EAAU9B,EAAO1B,IACjBwD,EAEX,QACI,OAAOrC,IEtFfC,UH4B2B,WAAgF,IAA/EH,EAA8E,uDAAnDF,EAAcW,EAAqC,uCAC1G,OAAQA,EAAOC,MACX,IAAK,kBACD,OAAOV,EAAUR,QAAO,SAAAuC,GAAE,OAAIA,EAAGhD,KAAO0B,EAAO1B,MACnD,IAAK,eACD,IAAM4D,EAA4B,CAAC5D,GAAI0B,EAAOG,WAAYxE,MAAMqE,EAAOrE,MAAOoD,OAAQ,OACtF,MAAM,GAAN,mBAAWQ,GAAX,CAAsB2C,IAC1B,IAAK,wBACD,IAAMC,EAAW5C,EAAUyC,MAAK,SAAAV,GAAE,OAAIA,EAAGhD,KAAO0B,EAAO1B,MACvD,OAAI6D,GACAA,EAASxG,MAAQqE,EAAOrE,MACjB,YAAI4D,IAERA,EACX,IAAK,yBACD,IAAM4C,EAAW5C,EAAUyC,MAAK,SAAAV,GAAE,OAAIA,EAAGhD,KAAO0B,EAAO1B,MACvD,OAAI6D,GACAA,EAASpD,OAASiB,EAAOjB,OAClB,YAAIQ,IAERA,EAEX,QACI,OAAOA,MGhDN6C,EAAQC,YAAYT,GAOjCxG,OAAOgH,MAAQA,ECVfE,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAEFI,SAASC,eAAe,SR+HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnH,GACLoH,QAAQpH,MAAMA,EAAMqH,c","file":"static/js/main.effd1ff2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {Add} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressAndItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                style={{width: '200'}}\r\n                label={'title'}\r\n                size={\"small\"}\r\n                color={'primary'}\r\n                variant={'outlined'}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAndItem}\r\n                error={error}\r\n                helperText={error ? 'Title is required!' : ''}\r\n            />\r\n\r\n\r\n            <IconButton onClick={addItem} > <Add/> </IconButton>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title:string\r\n    changeTaskTitle:(newTitle:string) => void\r\n}\r\n\r\nfunction EditableSpan(props:EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTaskTitle(title)\r\n    }\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const onEnter = (e:KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.changeTaskTitle(title)\r\n        }\r\n    }\r\n\r\n    return(\r\n        editMode ?\r\n            <TextField\r\n                style={{width: '140px'}}\r\n                size={\"small\"}\r\n                color={'secondary'}\r\n                    variant={'standard'}\r\n                    value={title}\r\n                    autoFocus={true}\r\n                    onChange={changeTitle}\r\n                    onBlur={offEditMode}\r\n                    onKeyPress={onEnter}\r\n            />\r\n\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TodoListPropsType = {\r\n    todoListid: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTasks: (taskID: string, todoListID: string) => void\r\n    changeTodoListFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n    changeTodolistTitleFilter: (newTitle:string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle:string, todoListID: string) => void\r\n    removeTodolist: (todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n\r\n    const addTask = (title: string) => props.addTask(title, props.todoListid)\r\n    const onAllClickHandler = () => props.changeTodoListFilter('all', props.todoListid)\r\n    const onActiveClickHandler = () => props.changeTodoListFilter('active', props.todoListid)\r\n    const onCompletedClickHandler = () => props.changeTodoListFilter('completed', props.todoListid)\r\n    const removeTodoList = () => props.removeTodolist(props.todoListid)\r\n    const changeTodolistTitle = (title:string) => props.changeTodolistTitleFilter(title, props.todoListid)\r\n    return (\r\n        <div>\r\n            <h3>\r\n\r\n                <EditableSpan title={props.title} changeTaskTitle={changeTodolistTitle}/>\r\n\r\n                <IconButton onClick={removeTodoList} > <Delete/> </IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <ul style={{listStyle: 'none', paddingLeft: '0'}}>\r\n\r\n                {\r\n                    props.tasks.map(task => {\r\n\r\n                        const onClickHandler = () => props.removeTasks(task.id, props.todoListid)\r\n                        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n                            props.changeTaskStatus(task.id, e.currentTarget.checked, props.todoListid)\r\n                        const changeTaskTitle = (newTitle:string) =>\r\n                            props.changeTaskTitle(task.id, newTitle,props.todoListid)\r\n\r\n                        return (\r\n                            <li key={task.id} className={task.isDone ? 'is-done' : ''}>\r\n                                <Checkbox\r\n                                    color={'secondary'}\r\n                                    checked={task.isDone}\r\n                                    onChange={changeTaskStatus}\r\n                                />\r\n\r\n\r\n                                <EditableSpan title={task.title} changeTaskTitle={changeTaskTitle}/>\r\n                                <IconButton onClick={onClickHandler} > <Delete/> </IconButton>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n\r\n                    variant={'contained'}\r\n                    color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                    size={'small'}\r\n                    onClick={onAllClickHandler}\r\n                > All\r\n                </Button>\r\n                <Button\r\n                    style={{ marginLeft: '5px'}}\r\n                    variant={'contained'}\r\n                    color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                    size={'small'}\r\n                    onClick={onActiveClickHandler}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    style={{ marginLeft: '5px'}}\r\n                    variant={'contained'}\r\n                    color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                    size={'small'}\r\n                    onClick={onCompletedClickHandler}\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TodoList;","import {FilterValuesType, TaskStateType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type:'ADD-TODOLIST'\r\n    title:string\r\n    todoListId:string\r\n}\r\n\r\nexport type ChangeTodoListTitle = {\r\n    type:'CHANGE-TODOLIST-TITLE'\r\n    title: string\r\n    id: string\r\n}\r\nexport type ChangeTodoListFilter = {\r\n    type:'CHANGE-TODOLIST-FILTER'\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\nexport type ActionType = RemoveTodoListActionType | AddTodoListActionType | ChangeTodoListTitle | ChangeTodoListFilter\r\n\r\n\r\n\r\nexport let todoListId1 = v1()\r\nexport let todoListId2 = v1()\r\n\r\nlet initialState: TodoListType[] = [\r\n    {id: todoListId1, title: 'What to learn', filter: 'all'},\r\n    {id: todoListId2, title: 'What to buy', filter: 'all'},\r\n]\r\n\r\nexport const todoListReducer = (todoLists:TodoListType[] = initialState, action:ActionType):TodoListType[] => {\r\n    switch (action.type){\r\n        case \"REMOVE-TODOLIST\":\r\n            return todoLists.filter(tl => tl.id !== action.id)\r\n        case \"ADD-TODOLIST\":\r\n            const newTodoList: TodoListType = {id: action.todoListId, title:action.title, filter: \"all\"}\r\n            return [...todoLists, newTodoList]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            const todoList = todoLists.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                todoList.title = action.title\r\n                return [...todoLists]\r\n            }\r\n            return todoLists\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            const todoList = todoLists.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                todoList.filter = action.filter\r\n                return [...todoLists]\r\n            }\r\n            return todoLists\r\n        }\r\n        default:\r\n            return todoLists\r\n    }\r\n}\r\nexport const RemoveTodoListAC = (id:string):RemoveTodoListActionType => {\r\n    return {type:\"REMOVE-TODOLIST\", id:id }\r\n}\r\nexport const AddTodoListAC = (title:string):AddTodoListActionType => {\r\n    return {type:\"ADD-TODOLIST\", title:title, todoListId: v1()}\r\n}\r\nexport const ChangeTodoListAC = (title:string, id: string):ChangeTodoListTitle => {\r\n    return {type:\"CHANGE-TODOLIST-TITLE\", title,id }\r\n}\r\nexport const ChangeTodoListFilterAC = (id:string,filter: FilterValuesType):ChangeTodoListFilter => {\r\n    return {type:\"CHANGE-TODOLIST-FILTER\", id, filter:filter }\r\n}","import {TaskStateType, TaskType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType, todoListId1, todoListId2} from \"./todolist-reducer\";\r\n\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId:string\r\n    todoListId:string\r\n}\r\ntype AddTaskActionType = {\r\n    type:\"ADD-TASK\"\r\n    title:string\r\n    todoListId:string\r\n}\r\ntype ChangeTaskStatusActionType = {\r\n    type:\"CHANGE-TASK-STATUS\"\r\n    taskId:string\r\n    todoListId:string\r\n    isDone:boolean\r\n}\r\ntype ChangeTaskTitleActionType = {\r\n    type:\"CHANGE-TASK-TITLE\"\r\n    taskId:string\r\n    todoListId:string\r\n    title:string\r\n}\r\n\r\n\r\nexport type ActionType = AddTaskActionType | RemoveTaskActionType | ChangeTaskStatusActionType |\r\n    ChangeTaskTitleActionType | AddTodoListActionType | RemoveTodoListActionType\r\n\r\nlet initialState:TaskStateType = {\r\n    [todoListId1]: [\r\n        {id: v1(), title: 'js', isDone: false},\r\n        {id: v1(), title: 'react', isDone: true},\r\n        {id: v1(), title: 'typescript', isDone: false},\r\n    ],\r\n    [todoListId2]: [\r\n        {id: v1(), title: 'milk', isDone: false},\r\n        {id: v1(), title: 'bread', isDone: true},\r\n        {id: v1(), title: 'potato', isDone: false},\r\n    ],}\r\n\r\nexport const taskReducer = (state:TaskStateType = initialState, action:ActionType):TaskStateType => {\r\n    switch (action.type){\r\n\r\n        case \"REMOVE-TASK\": {\r\n            let copyState = {...state}\r\n            copyState[action.todoListId] = copyState[action.todoListId].filter(task => task.id !== action.taskId)\r\n            return copyState\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false,\r\n            }\r\n            let copyState = {...state}\r\n            copyState[action.todoListId] = [newTask, ...copyState[action.todoListId]]\r\n            return copyState\r\n\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(task => {\r\n                    if (task.id === action.taskId) {\r\n                        return {...task, isDone: action.isDone}\r\n                    } else {\r\n                        return task\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n\r\n             let copyState = {...state}\r\n             const task = copyState[action.todoListId].find(t => t.id === action.taskId)\r\n             if (task) {\r\n                 task.title = action.title\r\n             }\r\n             return copyState\r\n             }\r\n        case \"ADD-TODOLIST\":\r\n            const newTodoListId = action.todoListId\r\n            return {...state,[newTodoListId]:[] }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId:string, todoListId:string):RemoveTaskActionType => {\r\n    return {type:\"REMOVE-TASK\",taskId:taskId, todoListId:todoListId}\r\n}\r\nexport const addTaskAC = (title:string, todoListId:string):AddTaskActionType => {\r\n    return {type:\"ADD-TASK\", title,todoListId}\r\n}\r\nexport const changeTaskStatusAC = (taskId:string,isDone:boolean, todoListId:string):ChangeTaskStatusActionType => {\r\n    return {type:\"CHANGE-TASK-STATUS\", taskId,todoListId, isDone}\r\n}\r\nexport const changeTaskTitleAC = (taskId:string,title:string, todoListId:string):ChangeTaskTitleActionType => {\r\n    return {type:\"CHANGE-TASK-TITLE\", taskId,todoListId, title}\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\nimport {AddTodoListAC, ChangeTodoListAC, ChangeTodoListFilterAC, RemoveTodoListAC} from \"./state/todolist-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/task-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\n\r\nexport type TaskType = {\r\n    title: string\r\n    id: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed' // | - и\r\n\r\nexport type TodoListType = {\r\n    title: string\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\nlet todoLists = useSelector<AppRootStateType,TodoListType[] >( state => state.todolists)\r\nlet tasks = useSelector<AppRootStateType,TaskStateType >( state => state.tasks)\r\n    //вторым параметром в типизации, то, что возвращает\r\n\r\nlet dispatch = useDispatch()\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n       let action =  removeTaskAC(taskID, todoListID)\r\n        dispatch(action)\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        let action =  addTaskAC(title, todoListID)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, newIsDoneValue: boolean, todoListID: string) {\r\n        let action =  changeTaskStatusAC(taskID,newIsDoneValue, todoListID)\r\n        dispatch(action)\r\n    }\r\n    function changeTaskTitle(taskID: string, newTitle: string, todoListID: string) {\r\n        let action =  changeTaskTitleAC(taskID,newTitle, todoListID)\r\n        dispatch(action)\r\n    }\r\n\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType, todoListID: string) {\r\n        let action =  ChangeTodoListFilterAC(todoListID,newFilterValue)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeTodolistTitleFilter(newTitle: string, todoListID: string) {\r\n        let action =  ChangeTodoListAC(newTitle,todoListID)\r\n        dispatch(action)\r\n    }\r\n\r\n    function removeTodolist(todoListID: string) {\r\n        let action =  RemoveTodoListAC(todoListID)\r\n        dispatch(action)\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let action =  AddTodoListAC(title)\r\n        dispatch(action)\r\n    }\r\n\r\n    // UI\r\n    //crud - create,read,update,delete\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <Menu/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\">\r\n                    News\r\n                </Typography>\r\n                <Button color=\"inherit\">Login</Button>\r\n            </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n\r\n           <Grid container style={{padding: '20px 0'}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n           </Grid>\r\n\r\n                <Grid container spacing={4}>\r\n            { todoLists.map(tl => {\r\n                    let tasksForTodoList = tasks[tl.id]\r\n                    if (tl.filter === 'active') {\r\n                        tasksForTodoList = tasksForTodoList.filter(t => t.isDone === false)\r\n                    }\r\n                    if (tl.filter === 'completed') {\r\n                        tasksForTodoList = tasksForTodoList.filter(t => t.isDone === true)\r\n                    }\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <Paper elevation={5} style={{ padding: ' 20px'}}>\r\n                            <TodoList\r\n                                todoListid={tl.id}\r\n                                title={tl.title}\r\n                                tasks={tasksForTodoList}\r\n                                filter={tl.filter}\r\n                                addTask={addTask}\r\n                                removeTasks={removeTask}\r\n                                changeTodoListFilter={changeFilter}\r\n                                changeTaskStatus={changeTaskStatus}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTodolistTitleFilter={changeTodolistTitleFilter}\r\n                            />\r\n                        </Paper></Grid>\r\n\r\n                    )\r\n                }) }\r\n            </Grid>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n","import {taskReducer} from './task-reducer';\r\nimport {todoListReducer} from './todolist-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todoListReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}