{"version":3,"sources":["api/todo-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/Todos/todos-reducer.ts","features/Todos/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todos/Todo/Task/Task.tsx","features/Todos/Todo/Todo.tsx","features/Todos/Todos.tsx","components/ErrorCnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/Backdrop/Backdrop.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatus","TaskPriority","instance","axios","create","baseURL","withCredentials","headers","todoAPI","get","title","post","todoId","delete","put","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleNetworkAppError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","changeTodoEntityStatusAC","updateTaskTC","domainModel","getState","task","tasks","find","id","apiModel","startDate","priority","description","deadline","then","res","resultCode","updateTaskAC","catch","console","warn","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","onChange","e","currentTarget","onKeyPress","charCode","variant","size","color","label","helperText","disabled","IconButton","onClick","EditableSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","Task","changeTaskTitle","entityStatus","removeTask","changeTaskStatus","onChangeTaskTitleHandler","useCallback","className","Completed","Checkbox","checked","newStatus","New","Delete","fontSize","Todo","todo","addTask","changeTodoTitle","changeTodoFilter","removeTodo","useDispatch","useEffect","setTasksAC","items","onChangeTodoTitle","onAddTask","allClickHandler","activeClickHandler","completedClickHandler","tasksForTodo","filter","style","listStyle","padding","margin","map","Button","Todos","todos","useSelector","state","auth","addTodo","item","log","addTodoTC","changeTodoFilterAC","changeTodoTitleAC","changeTodoTitleTC","removeTodoAC","deleteTodoTC","addTaskTC","removeTaskAC","deleteTasksTC","Grid","container","marginLeft","spacing","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","response","validate","errors","test","marginTop","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","getFieldProps","touched","FormControlLabel","control","useStyles","makeStyles","theme","createStyles","backdrop","zIndex","drawer","SimpleBackdrop","classes","initialized","Backdrop","CircularProgress","flexGrow","App","logoutHandler","AppBar","position","Toolbar","Typography","cursor","LinearProgress","Container","fixed","exact","path","render","rootReducer","combineReducers","action","todoListId","stateCopy","copyState","forEach","store","createStore","applyMiddleware","ReduxThunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2d9e39ff.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst instance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n  withCredentials: true,\n  headers: {\n    'API-KEY': '7e928b19-02e3-4839-a906-80cc9541b152'\n  }\n})\n\n\nexport const todoAPI = {\n  getTodos() {\n    return instance.get<Array<TodoType>>(`todo-lists`)\n  },\n  createTodo(title: string) {\n    return instance.post<ResponseType<{ item: TodoType }>>(`todo-lists`, {title})\n  },\n  deleteTodo(todoId: string) {\n    return instance.delete<ResponseType>(`todo-lists/${todoId}`)\n  },\n  updateTodo(todoId: string, title: string) {\n    return instance.put<ResponseType>(`todo-lists/${todoId}`, {title})\n  },\n\n  getTasks(todoId: string) {\n    return instance.get<GetTasksResponse>(`todo-lists/${todoId}/tasks`)\n  },\n  createTask(todoId: string, title: string) {\n    return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoId}/tasks`, {title})\n  },\n  deleteTask(todoId: string, taskId: string) {\n    return instance.delete<ResponseType>(`todo-lists/${todoId}/tasks/${taskId}`)\n  },\n  updateTask(todoId: string, taskId: string, model: UpdateTaskModelType) {\n    return instance.put<ResponseType<TaskType>>(`todo-lists/${todoId}/tasks/${taskId}`, model)\n  }\n}\n\nexport const authAPI = {\n  login(data: LoginParamsType) {\n    return instance.post<ResponseType<{userId?: number}>>(`auth/login`, data)\n  },\n  me(){\n    return instance.get<ResponseType<MeResponseType>>(`auth/me`)\n  },\n  logout(){\n    return instance.delete<ResponseType>(`auth/login`)\n  }\n}\n\n// types\n\n//todo & task\n\nexport type TodoType = {\n  id: string\n  title: string\n  addedDate: string\n  order: number\n}\n\nexport type TaskType = {\n  id: string\n  todoListId: string\n  description: string\n  title: string\n  status: number\n  priority: number\n  startDate: string\n  deadline: string\n  order: number\n  addedDate: string\n}\n\nexport enum TaskStatus {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3\n}\n\nexport enum TaskPriority {\n  Low = 0,\n  Middle = 1,\n  Hi = 2,\n  Draft = 3,\n  Urgently = 3,\n  Later = 4\n}\n\nexport type UpdateTaskModelType = {\n  title: string\n  description: string\n  status: TaskStatus\n  priority: TaskPriority\n  startDate: string\n  deadline: string\n}\n\nexport type ResponseType<T = {}> = {\n  resultCode: number\n  messages: Array<string>\n  data: T\n}\n\ntype GetTasksResponse = {\n  items: Array<TaskType>\n  totalCount: number\n  error: string | null\n}\n\n// auth\n\nexport type LoginParamsType = {\n  email: string\n  password: string\n  rememberMe: boolean\n  captcha?: string\n}\n\nexport type MeResponseType = {\n  id: number\n  email: string\n  login: string\n}\n","import {ResponseType} from '../api/todo-api'\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\nimport {Dispatch} from 'redux'\n\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n  if (data.messages.length) {\n    dispatch(setAppErrorAC(data.messages[0]))\n  } else {\n    dispatch(setAppErrorAC('Some error occurred'))\n  }\n  dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleNetworkAppError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n  dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\n  dispatch(setAppStatusAC('failed'))\n}\n","import {authAPI, LoginParamsType} from '../../api/todo-api'\nimport {Dispatch} from 'redux'\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {handleNetworkAppError, handleServerAppError} from '../../utils/error-utils'\n\nconst initialState = {\n  isLoggedIn: false as boolean\n}\n\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\n  switch (action.type) {\n    case 'LOGIN/SET-IS-LOGGED-IN':\n      return {...state, isLoggedIn: action.value}\n    default:\n      return state\n  }\n}\n\n// actions\n\nexport const setIsLoggedInAC = (value: boolean) => {\n  return {type: 'LOGIN/SET-IS-LOGGED-IN', value} as const\n}\n\n// thunks\n\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionType>) => {\n  dispatch(setAppStatusAC('loading'))\n  authAPI.login(data)\n    .then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(setIsLoggedInAC(true))\n        dispatch(setAppStatusAC('succeeded'))\n      } else {\n        handleServerAppError(response.data, dispatch)\n      }\n    })\n    .catch(error => {\n      handleNetworkAppError(error, dispatch)\n    })\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionType>) => {\n  dispatch(setAppStatusAC('loading'))\n  authAPI.logout()\n    .then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(setIsLoggedInAC(false))\n        dispatch(setAppStatusAC('succeeded'))\n      } else {\n        handleServerAppError(response.data, dispatch)\n      }\n    })\n    .catch(error => {\n      handleNetworkAppError(error, dispatch)\n    })\n}\n\n\n\n// types\n\nexport type SetIsLoggedInActionType = typeof setIsLoggedInAC\ntype ActionType =\n  | ReturnType<SetIsLoggedInActionType>\n  | SetAppErrorActionType\n  | SetAppStatusActionType\n\n\n","import {Dispatch} from 'redux'\nimport {authAPI} from '../api/todo-api'\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState = {\n  status: 'idle' as RequestStatusType,\n  error: null as string | null,\n  isInitialized: false as boolean\n}\n\ntype InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\n  switch (action.type) {\n    case 'APP/SET-STATUS':\n      return {...state, status: action.status}\n    case 'APP/SET-ERROR':\n      return {...state, error: action.error}\n    case 'APP/SET-INIT':\n      return {...state, isInitialized: action.value}\n    default:\n      return state\n  }\n}\n\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\nexport const setAppInitAC = (value: boolean) => ({type: 'APP/SET-INIT', value} as const)\n\nexport const initAppTC = () => (dispatch: Dispatch) => {\n  authAPI.me()\n    .then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(setIsLoggedInAC(true))\n      }\n      dispatch(setAppInitAC(true))\n    })\n}\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\n\ntype ActionType =\n  | SetAppErrorActionType\n  | SetAppStatusActionType\n  | ReturnType<typeof setAppInitAC>\n","import {Dispatch} from 'redux'\nimport {todoAPI, TodoType} from '../../api/todo-api'\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {handleNetworkAppError} from '../../utils/error-utils'\n\nconst initialState: Array<TodoDomainType> = []\n\nexport const todosReducer = (state: Array<TodoDomainType> = initialState, action: ActionType): Array<TodoDomainType> => {\n  switch (action.type) {\n    case 'REMOVE-TODO':\n      return state.filter(todo => todo.id !== action.todoId)\n    case 'ADD-TODO':\n      return [{...action.todo, filter: 'all', entityStatus: 'idle'}, ...state]\n    case 'CHANGE-TODO-TITLE':\n      return state.map(todo => todo.id === action.todoId ? {...todo, title: action.title} : todo)\n    case 'CHANGE-TODO-FILTER':\n      return state.map(todo => todo.id === action.todoId ? {...todo, filter: action.filter} : todo)\n    case 'CHANGE-TODO-ENTITY-STATUS':\n      return state.map(todo => todo.id === action.todoId ? {...todo, entityStatus: action.status} : todo)\n    case 'SET-TODOS':\n      return action.todos.map(todo => ({...todo, filter: 'all', entityStatus: 'idle'}))\n    default:\n      return state\n  }\n}\n\n// actions\n\nexport const removeTodoAC = (todoId: string) => {\n  return {type: 'REMOVE-TODO', todoId} as const\n}\n\nexport const addTodoAC = (todo: TodoType) => {\n  return {type: 'ADD-TODO', todo} as const\n}\n\nexport const changeTodoTitleAC = (todoId: string, title: string) => {\n  return {type: 'CHANGE-TODO-TITLE', todoId, title} as const\n}\n\nexport const changeTodoFilterAC = (todoId: string, filter: TodoFilterValueType) => {\n  return {type: 'CHANGE-TODO-FILTER', todoId, filter} as const\n}\n\nexport const setTodosAC = (todos: Array<TodoType>) => {\n  return {type: 'SET-TODOS', todos} as const\n}\n\nexport const changeTodoEntityStatusAC = (todoId: string, status: RequestStatusType) => {\n  return {type: 'CHANGE-TODO-ENTITY-STATUS', todoId, status} as const\n}\n\n// thunks\n\nexport const fetchTodosTC = () => (dispatch: Dispatch<ActionType>) => {\n  dispatch(setAppStatusAC('loading'))\n  todoAPI.getTodos()\n    .then((res) => {\n      dispatch(setTodosAC(res.data))\n    })\n    .catch((error) => {\n      handleNetworkAppError(error, dispatch)\n    })\n}\n\nexport const deleteTodoTC = (todoId: string) => (dispatch: Dispatch<ActionType>) => {\n  dispatch(setAppStatusAC('loading'))\n  dispatch(changeTodoEntityStatusAC(todoId, 'loading'))\n  todoAPI.deleteTodo(todoId)\n    .then((res) => {\n      dispatch(removeTodoAC(todoId))\n      dispatch(setAppStatusAC('succeeded'))\n    })\n    .catch((error) => {\n      handleNetworkAppError(error, dispatch)\n      dispatch(changeTodoEntityStatusAC(todoId, 'failed'))\n    })\n}\n\nexport const addTodoTC = (title: string) => (dispatch: Dispatch<ActionType>) => {\n  dispatch(setAppStatusAC('loading'))\n  todoAPI.createTodo(title)\n    .then((res) => {\n      dispatch(addTodoAC(res.data.data.item))\n      dispatch(setAppStatusAC('succeeded'))\n    })\n    .catch((error) => {\n      console.log(error)\n      handleNetworkAppError(error, dispatch)\n    })\n}\n\n\nexport const changeTodoTitleTC = (todoId: string, title: string) => (dispatch: Dispatch<ActionType>) => {\n  dispatch(setAppStatusAC('loading'))\n  todoAPI.updateTodo(todoId, title)\n      .then(() => {\n        dispatch(changeTodoTitleAC(todoId, title))\n        dispatch(setAppStatusAC('succeeded'))\n      })\n      .catch((error) => {\n        handleNetworkAppError(error, dispatch)\n      })\n}\n\n// types\n\nexport type SetTodosActionType = ReturnType<typeof setTodosAC>\nexport type RemoveTodoActionType = ReturnType<typeof removeTodoAC>\nexport type AddTodoActionType = ReturnType<typeof addTodoAC>\n\ntype ActionType =\n  | RemoveTodoActionType\n  | AddTodoActionType\n  | SetTodosActionType\n  | ReturnType<typeof changeTodoTitleAC>\n  | ReturnType<typeof changeTodoFilterAC>\n  | SetAppStatusActionType\n  | ReturnType<typeof changeTodoEntityStatusAC>\n  | SetAppErrorActionType\n\nexport type TodoFilterValueType = 'all' | 'active' | 'completed'\nexport type TodoDomainType = TodoType & {\n  filter: TodoFilterValueType,\n  entityStatus: RequestStatusType\n}\n","import {TaskPriority, TaskStatus, TaskType, todoAPI, UpdateTaskModelType} from '../../api/todo-api'\nimport {AddTodoActionType, RemoveTodoActionType, SetTodosActionType} from './todos-reducer'\nimport {Dispatch} from 'redux'\nimport {AppRootStateType} from '../../app/store'\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {handleNetworkAppError, handleServerAppError} from '../../utils/error-utils'\n\nconst initialState: TasksType = {}\n\nexport const tasksReducer = (state: TasksType = initialState, action: ActionType) => {\n  switch (action.type) {\n    case 'REMOVE-TASK':\n      return {...state, [action.todoId]: state[action.todoId].filter(task => task.id !== action.taskId)}\n    case 'ADD-TASK':\n      return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n    case 'UPDATE-TASK':\n      return {\n        ...state, [action.todoId]: state[action.todoId].map(task => task.id === action.taskId\n          ? {...task, ...action.model}\n          : task\n        )\n      }\n    case 'ADD-TODO':\n      return {...state, [action.todo.id]: []}\n    case 'REMOVE-TODO': {\n      const stateCopy = {...state}\n      delete stateCopy[action.todoId]\n      return stateCopy\n    }\n    case 'SET-TODOS': {\n      const copyState = {...state}\n      action.todos.forEach(todo => {\n        copyState[todo.id] = []\n      })\n      return copyState\n    }\n    case 'SET-TASKS':\n      return {...state, [action.todoId]: action.tasks}\n    default:\n      return state\n  }\n}\n\n// actions\n\nexport const removeTaskAC = (taskId: string, todoId: string) => {\n  return {type: 'REMOVE-TASK', taskId, todoId} as const\n}\n\nexport const addTaskAC = (task: TaskType) => {\n  return {type: 'ADD-TASK', task} as const\n}\n\nexport const updateTaskAC = (taskId: string, todoId: string, model: UpdateDomainTaskModelType) => {\n  return {type: 'UPDATE-TASK', taskId, todoId, model} as const\n}\n\nexport const setTasksAC = (tasks: Array<TaskType>, todoId: string) => {\n  return {type: 'SET-TASKS', tasks, todoId} as const\n}\n\n// thunks\n\nexport const fetchTasksTC = (todoId: string) => (dispatch: Dispatch<ActionType>) => {\n  todoAPI.getTasks(todoId)\n    .then((res) => {\n      dispatch(setTasksAC(res.data.items, todoId))\n      dispatch(setAppStatusAC('succeeded'))\n    })\n    .catch((error) => {\n      handleNetworkAppError(error, dispatch)\n    })\n}\n\nexport const deleteTasksTC = (todoId: string, taskId: string) => (dispatch: Dispatch<ActionType>) => {\n  dispatch(setAppStatusAC('loading'))\n\n  todoAPI.deleteTask(todoId, taskId)\n    .then((res) => {\n      if (res.data.resultCode === 0) {\n        dispatch(removeTaskAC(taskId, todoId))\n        dispatch(setAppStatusAC('succeeded'))\n      } else {\n        handleServerAppError(res.data, dispatch)\n      }\n    })\n    .catch((error) => {\n      handleNetworkAppError(error, dispatch)\n    })\n}\n\nexport const addTaskTC = (title: string, todoId: string) => (dispatch: Dispatch<ActionType>) => {\n  dispatch(setAppStatusAC('loading'))\n  todoAPI.createTask(todoId, title)\n    .then((res) => {\n      if (res.data.resultCode === 0) {\n        dispatch(addTaskAC(res.data.data.item))\n        dispatch(setAppStatusAC('succeeded'))\n      } else {\n        handleServerAppError(res.data, dispatch)\n      }\n    })\n    .catch((error) => {\n      handleNetworkAppError(error, dispatch)\n    })\n}\n\nexport const updateTaskTC = (todoId: string, taskId: string, domainModel: UpdateDomainTaskModelType) => {\n  return (dispatch: Dispatch<ActionType>, getState: () => AppRootStateType) => {\n\n    const state = getState()\n    const task = state.tasks[todoId].find(task => task.id === taskId)\n    if (!task) {\n      console.warn('task not found')\n      return\n    }\n\n    const apiModel: UpdateTaskModelType = {\n      status: task.status,\n      startDate: task.startDate,\n      priority: task.priority,\n      title: task.title,\n      description: task.description,\n      deadline: task.deadline,\n      ...domainModel\n    }\n\n    dispatch(setAppStatusAC('loading'))\n    todoAPI.updateTask(todoId, taskId, apiModel)\n      .then((res) => {\n        if (res.data.resultCode === 0) {\n          dispatch(updateTaskAC(taskId, todoId, domainModel))\n          dispatch(setAppStatusAC('succeeded'))\n        } else {\n          handleServerAppError(res.data, dispatch)\n        }\n      })\n      .catch((error) => {\n        handleNetworkAppError(error, dispatch)\n      })\n  }\n}\n\n// types\n\nexport type TasksType = {\n  [key: string]: Array<TaskType>\n}\n\ntype ActionType =\n  | ReturnType<typeof removeTaskAC>\n  | ReturnType<typeof addTaskAC>\n  | ReturnType<typeof updateTaskAC>\n  | ReturnType<typeof setTasksAC>\n  | SetTodosActionType\n  | RemoveTodoActionType\n  | AddTodoActionType\n  | SetAppErrorActionType\n  | SetAppStatusActionType\n\nexport type UpdateDomainTaskModelType = {\n  title?: string\n  description?: string\n  status?: TaskStatus\n  priority?: TaskPriority\n  startDate?: string\n  deadline?: string\n}\n","import {IconButton, TextField} from '@material-ui/core'\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react'\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline'\n\ntype AddItemFormPropsType = {\n  addItem: (title: string) => void\n  disabled?: boolean\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n  const [title, setTitle] = useState<string>('')\n  const [error, setError] = useState<string | null>(null)\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value)\n  }\n\n  const addItem = () => {\n    if (title.trim() !== '') {\n      props.addItem(title)\n      setTitle('')\n    } else {\n      setError('Title is required')\n    }\n  }\n\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (error !== null) {\n      setError(null)\n    }\n    if (e.charCode === 13) {\n      addItem()\n    }\n  }\n\n  return (\n    <div>\n      <TextField\n        value={title}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n        error={!!error}\n        variant=\"outlined\"\n        size=\"small\"\n        color=\"secondary\"\n        label=\"Title\"\n        helperText={error}\n        disabled={props.disabled}\n      />\n      <IconButton onClick={addItem} disabled={props.disabled}>\n        <AddCircleOutlineIcon />\n      </IconButton>\n    </div>\n  )\n})\n","import React, {ChangeEvent, useState} from 'react'\nimport {TextField} from '@material-ui/core'\n\ntype EditableSpanPropsType = {\n  title: string\n  changeTitle: (title: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  const [editMode, setEditMode] = useState<boolean>(false)\n  const [title, setTitle] = useState<string>('')\n\n  const onEditMode = () => {\n    setEditMode(true)\n    setTitle(props.title)\n  }\n\n  const offEditMode = () => {\n    setEditMode(false)\n    props.changeTitle(title)\n  }\n\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value)\n  }\n\n  return (\n    editMode\n      ? <TextField\n        value={title}\n        onChange={onChangeTitleHandler}\n        onBlur={offEditMode}\n        variant=\"standard\"\n        size=\"small\"\n        color=\"secondary\"\n        autoFocus\n      />\n      : <span onDoubleClick={onEditMode}>{props.title}</span>\n  )\n})\n","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from '@material-ui/core'\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\nimport {Delete} from '@material-ui/icons'\nimport {TaskStatus, TaskType} from '../../../../api/todo-api'\nimport {RequestStatusType} from '../../../../app/app-reducer'\n\ntype TaskPropsType = {\n  task: TaskType\n  todoId: string\n  removeTask: (taskId: string, todoId: string) => void\n  changeTaskStatus: (taskId: string, todoId: string, status: TaskStatus) => void\n  changeTaskTitle: (taskId: string, todoId: string, title: string) => void\n  entityStatus: RequestStatusType\n}\n\nexport const Task: React.FC<TaskPropsType> = React.memo(props => {\n  const {\n    task,\n    todoId,\n    changeTaskTitle,\n    entityStatus,\n    removeTask,\n    changeTaskStatus\n  } = props\n\n  const onClickHandler = () => removeTask(task.id, todoId)\n\n  const onChangeTaskStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    const newStatus = e.currentTarget.checked\n    changeTaskStatus(task.id, todoId, newStatus ? TaskStatus.Completed : TaskStatus.New)\n  }\n\n  const onChangeTaskTitleHandler = useCallback((title: string) => {\n    changeTaskTitle(task.id, todoId, title)\n  }, [changeTaskTitle, task.id, todoId])\n\n  return (\n    <li key={task.id} className={task.status === TaskStatus.Completed ? 'is-done' : ''}>\n      <Checkbox\n        checked={task.status === TaskStatus.Completed}\n        onChange={onChangeTaskStatusHandler}\n        disabled={entityStatus === 'loading'}\n      />\n      <EditableSpan title={task.title} changeTitle={onChangeTaskTitleHandler} />\n      <IconButton onClick={onClickHandler} disabled={entityStatus === 'loading'}>\n        <Delete fontSize=\"small\" />\n      </IconButton>\n    </li>\n  )\n})\n","import React, {useCallback, useEffect} from 'react'\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\nimport {Button, IconButton} from '@material-ui/core'\nimport {Delete} from '@material-ui/icons'\nimport {Task} from './Task/Task'\nimport {TodoDomainType, TodoFilterValueType} from '../todos-reducer'\nimport {TaskStatus, TaskType} from '../../../api/todo-api'\nimport {useDispatch} from 'react-redux'\nimport {fetchTasksTC} from '../tasks-reducer'\n\ntype TodoPropsType = {\n  todo: TodoDomainType\n  changeTodoFilter: (value: TodoFilterValueType, todoId: string) => void\n  changeTodoTitle: (title: string, todoId: string) => void\n  removeTodo: (todoId: string) => void\n  tasks: Array<TaskType>\n  addTask: (title: string, todoId: string) => void\n  removeTask: (taskId: string, todoId: string) => void\n  changeTaskTitle: (taskId: string, todoId: string, title: string) => void\n  changeTaskStatus: (taskId: string, todoId: string, status: TaskStatus) => void\n}\n\nexport const Todo: React.FC<TodoPropsType> = React.memo((props) => {\n\n  const {\n    tasks,\n    todo,\n    addTask,\n    removeTask,\n    changeTodoTitle,\n    changeTodoFilter,\n    changeTaskStatus,\n    changeTaskTitle,\n    removeTodo\n  } = props\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTasksTC(todo.id))\n  }, [dispatch, todo.id])\n\n  const onRemoveTodo = () => removeTodo(todo.id)\n\n  const onChangeTodoTitle = useCallback((title: string) => {\n    return changeTodoTitle(title, todo.id)\n  }, [changeTodoTitle, todo.id])\n\n  const onAddTask = useCallback((title: string) => {\n    return addTask(title, todo.id)\n  }, [addTask, todo.id])\n\n  const allClickHandler = useCallback(() => {\n    return changeTodoFilter('all', todo.id)\n  }, [changeTodoFilter, todo.id])\n\n  const activeClickHandler = useCallback(() => {\n    return changeTodoFilter('active', todo.id)\n  }, [changeTodoFilter, todo.id])\n\n  const completedClickHandler = useCallback(() => {\n    return changeTodoFilter('completed', todo.id)\n  }, [changeTodoFilter, todo.id])\n\n  let tasksForTodo = tasks\n\n  if (todo.filter === 'active') {\n    tasksForTodo = tasks.filter(task => task.status === TaskStatus.New)\n  }\n\n  if (todo.filter === 'completed') {\n    tasksForTodo = tasks.filter(task => task.status === TaskStatus.Completed)\n  }\n\n  return (\n    <div>\n      <h3>\n        <EditableSpan title={todo.title} changeTitle={onChangeTodoTitle} />\n        <IconButton onClick={onRemoveTodo} disabled={todo.entityStatus === 'loading'}>\n          <Delete fontSize=\"small\" />\n        </IconButton>\n      </h3>\n      <AddItemForm addItem={onAddTask} disabled={todo.entityStatus === 'loading'} />\n      <ul style={{listStyle: 'none', padding: '0', margin: '0'}}>\n        {\n          tasksForTodo.map(task => {\n            return (\n              <Task\n                key={task.id}\n                task={task}\n                todoId={todo.id}\n                removeTask={removeTask}\n                changeTaskTitle={changeTaskTitle}\n                changeTaskStatus={changeTaskStatus}\n                entityStatus={todo.entityStatus}\n              />\n            )\n          })\n        }\n      </ul>\n      <div>\n        <Button\n          onClick={allClickHandler}\n          color=\"secondary\"\n          variant={todo.filter === 'all' ? 'outlined' : 'text'}\n          size=\"small\"\n        >\n          All\n        </Button>\n        <Button\n          onClick={activeClickHandler}\n          color=\"secondary\"\n          variant={todo.filter === 'active' ? 'outlined' : 'text'}\n          size=\"small\"\n        >\n          Active\n        </Button>\n        <Button\n          onClick={completedClickHandler}\n          color=\"secondary\"\n          variant={todo.filter === 'completed' ? 'outlined' : 'text'}\n          size=\"small\"\n        >\n          Completed\n        </Button>\n      </div>\n    </div>\n  )\n})\n","import React, {useCallback, useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../app/store'\nimport {\n  addTodoTC,\n  changeTodoFilterAC,\n  changeTodoTitleTC,\n  deleteTodoTC,\n  fetchTodosTC,\n  TodoDomainType,\n  TodoFilterValueType\n} from './todos-reducer'\nimport {addTaskTC, deleteTasksTC, TasksType, updateTaskTC} from './tasks-reducer'\nimport {TaskStatus} from '../../api/todo-api'\nimport {Grid, Paper} from '@material-ui/core'\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\nimport {Todo} from './Todo/Todo'\nimport {Redirect} from 'react-router-dom'\n\nexport const Todos: React.FC = () => {\n  const dispatch = useDispatch()\n  const todos = useSelector<AppRootStateType, Array<TodoDomainType>>(state => state.todos)\n  const tasks = useSelector<AppRootStateType, TasksType>(state => state.tasks)\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      return\n    }\n    dispatch(fetchTodosTC())\n  }, [dispatch, isLoggedIn])\n\n  const addTodo = useCallback((title: string) => {\n    dispatch(addTodoTC(title))\n  }, [dispatch])\n\n  const changeTodoFilter = useCallback((value: TodoFilterValueType, todoId: string) => {\n    dispatch(changeTodoFilterAC(todoId, value))\n  }, [dispatch])\n\n  const changeTodoTitle = useCallback((title: string, todoId: string) => {\n    dispatch(changeTodoTitleTC(todoId, title))\n  }, [dispatch])\n\n  const removeTodo = useCallback((todoId: string) => {\n    dispatch(deleteTodoTC(todoId))\n  }, [dispatch])\n\n  const changeTaskStatus = useCallback((taskId: string, todoId: string, status: TaskStatus) => {\n    dispatch(updateTaskTC(todoId, taskId, {status}))\n  }, [dispatch])\n\n  const addTask = useCallback((title: string, todoId: string) => {\n    dispatch(addTaskTC(title, todoId))\n  }, [dispatch])\n\n  const removeTask = useCallback((taskId: string, todoId: string) => {\n    dispatch(deleteTasksTC(todoId, taskId))\n  }, [dispatch])\n\n  const changeTaskTitle = useCallback((taskId: string, todoId: string, title: string) => {\n    dispatch(updateTaskTC(todoId, taskId, {title}))\n  }, [dispatch])\n\n\n  if (!isLoggedIn) {\n    return <Redirect to=\"/login\" />\n  }\n\n  return (\n    <>\n      <Grid container style={{padding: '20px'}}>\n        <AddItemForm addItem={addTodo} />\n      </Grid>\n      <Grid style={{marginLeft:'10px'}} container spacing={3}>\n        {\n          todos.map(todo => {\n            return (\n              <Grid item key={todo.id}>\n                <Paper style={{padding: '10px'}} elevation={5}>\n                  <Todo\n                    todo={todo}\n                    changeTodoFilter={changeTodoFilter}\n                    removeTodo={removeTodo}\n                    changeTodoTitle={changeTodoTitle}\n                    tasks={tasks[todo.id]}\n                    removeTask={removeTask}\n                    addTask={addTask}\n                    changeTaskStatus={changeTaskStatus}\n                    changeTaskTitle={changeTaskTitle}\n                  />\n                </Paper>\n              </Grid>\n            )\n          })\n        }\n      </Grid>\n    </>\n  )\n}\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../app/store'\nimport {setAppErrorAC} from '../../app/app-reducer'\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n  const dispatch = useDispatch()\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      dispatch(setAppErrorAC(null))\n    }\n    dispatch(setAppErrorAC(null))\n  }\n\n  const isOpen = error !== null\n\n  return (\n      <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          {error}\n        </Alert>\n      </Snackbar>\n  )\n}\n","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from 'formik'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {loginTC} from './auth-reducer'\nimport {AppRootStateType} from '../../app/store'\nimport {Redirect} from 'react-router-dom'\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {}\n            if (!values.email) {\n                errors.email = 'Required'\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address'\n            }\n            if (!values.password) {\n                errors.password = 'Required'\n            } else if (values.password.length < 2) {\n                errors.password = 'Password must be more than 2 characters'\n            }\n            return errors\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to=\"/\"/>\n    }\n\n    return <Grid container style={{marginTop:'30px'}} justify=\"center\">\n        <Grid  item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a\n                                style={{marginLeft: '5px'}}\n                                href={'https://social-network.samuraijs.com/'}\n                                target={'_blank'}\n                                rel=\"noreferrer\">\n                                here </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email && formik.errors.email ?\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\n                        <TextField\n                            label=\"Password\"\n                            type=\"password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password ?\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={\n                                <Checkbox\n                                    {...formik.getFieldProps('rememberMe')}\n                                    checked={formik.values.rememberMe}\n                                />\n                            }\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n","import React from 'react'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles'\nimport {useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../app/store'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    backdrop: {\n      zIndex: theme.zIndex.drawer + 1,\n      color: '#fff',\n    },\n  }),\n)\n\nexport function SimpleBackdrop() {\n  const classes = useStyles()\n  const initialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n\n  return (\n    <div>\n      <Backdrop className={classes.backdrop} open={!initialized}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </div>\n  )\n}\n","import React, {useCallback, useEffect} from 'react'\nimport {\n    AppBar,\n    Button,\n    Container,\n    createStyles,\n    LinearProgress,\n    makeStyles,\n    Toolbar,\n    Typography\n} from '@material-ui/core'\nimport {Todos} from '../features/Todos/Todos'\nimport {ErrorSnackbar} from '../components/ErrorCnackbar/ErrorSnackbar'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from './store'\nimport {initAppTC, RequestStatusType} from './app-reducer'\nimport {Login} from '../features/Login/Login'\nimport {Route, Switch} from 'react-router-dom'\nimport {logoutTC} from '../features/Login/auth-reducer'\nimport {SimpleBackdrop} from '../components/Backdrop/Backdrop'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    title: {\n      flexGrow: 1,\n    },\n  }),\n)\n\nconst App = () => {\n    const classes = useStyles()\n\n    const dispatch = useDispatch()\n\n    const initialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const logoutHandler = useCallback(() => {\n        dispatch(logoutTC())\n    }, [dispatch])\n\n\n    useEffect(() => {\n        if (!initialized) dispatch(initAppTC())\n\n    }, [dispatch, initialized])\n\n\n    return (\n        <>\n            <SimpleBackdrop/>\n            <ErrorSnackbar/>\n            <AppBar position=\"static\" color=\"secondary\">\n                <Toolbar>\n                    <Typography\n                        variant=\"h6\"\n                        style={{cursor: 'default'}}\n                        className={classes.title}\n                    >\n                        Todo\n                    </Typography>\n\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Log out</Button>}\n                </Toolbar>\n            </AppBar>\n\n            {status === 'loading' && <LinearProgress/>}\n            <Container fixed>\n                <Switch>\n                    <Route exact path=\"/\" render={() => <Todos/>}/>\n                    <Route path=\"/login\" render={() => <Login/>}/>\n                </Switch>\n            </Container>\n        </>\n    )\n}\n\nexport default App\n","import {tasksReducer} from '../features/Todos/tasks-reducer'\nimport {todosReducer} from '../features/Todos/todos-reducer'\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\nimport ReduxThunk from 'redux-thunk'\nimport {appReducer} from './app-reducer'\nimport {authReducer} from '../features/Login/auth-reducer'\n\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todos: todosReducer,\n  app: appReducer,\n  auth: authReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(ReduxThunk))\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nwindow.store = store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './app/App'\nimport {store} from './app/store'\nimport {Provider} from 'react-redux'\nimport {HashRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}